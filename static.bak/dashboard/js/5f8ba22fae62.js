(function(){'use strict';var dangerTypes={'delete':1,'danger':1,'delete-selected':1};angular.module('horizon.framework.widgets.action-list').factory('horizon.framework.widgets.action-list.actions.service',actionsService);actionsService.$inject=['$compile','$http','$parse','$q','$templateCache','horizon.framework.widgets.basePath','horizon.framework.util.q.extensions'];function actionsService($compile,$http,$parse,$q,$templateCache,basePath,$qExtensions){return function(spec){return createService(spec.scope,spec.element,spec.ctrl,spec.listType,spec.item,spec.resultHandler);};function createService(scope,element,ctrl,listType,item,resultHandler){var service={renderActions:renderActions};return service;function renderActions(allowedActions){allowedActions.forEach(function(allowedAction){allowedAction.promise=getPermissions(allowedAction);allowedAction.context=allowedAction;});$qExtensions.allSettled(allowedActions).then(renderPermittedActions);function getPermissions(allowedAction){if(listType==='batch'){return allowedAction.service.allowed();}else{var itemVal=$parse(item)(scope);return allowedAction.service.allowed(itemVal);}}}
function renderPermittedActions(permittedActions){if(permittedActions.pass.length>0){var templateFetch=$q.all(permittedActions.pass.map(getTemplate));if(listType==='detail'){templateFetch.then(addDetailActions);}else if(listType==='batch'||permittedActions.pass.length===1){element.addClass('btn-addon');templateFetch.then(addButtons);}else{templateFetch.then(addDropdown);}}}
function addDetailActions(templates){var row=angular.element('<div class="row"></div>');element.append(row);templates.forEach(function renderDetailAction(template){var templateElement=angular.element(template.template);templateElement.find('action').attr('callback',template.callback);row.append($compile(templateElement)(scope));});}
function addButtons(templates){templates.forEach(addTemplate);}
function addTemplate(template){element.append(renderButton(template,scope));}
function addDropdown(templates){var splitButton=getSplitButton(templates[0]);var actionList=[];for(var iCnt=1;iCnt<templates.length;iCnt++){actionList.push(getMenuButton(templates[iCnt]));}
var actionListElem=renderList(actionList,splitButton,scope);element.append($compile(actionListElem)(scope));}
function renderButton(actionTemplate,scope){var actionElement=angular.element(actionTemplate.template);actionElement.attr('callback',actionTemplate.callback);var actionListElem=angular.element('<action-list>');actionListElem.addClass('btn-addon');actionListElem.append(actionElement);return $compile(actionListElem)(scope);}
function renderList(actionList,splitButton,scope){var actionListElem=angular.element('<action-list uib-dropdown>');actionListElem.attr('dropdown','true');actionListElem.append(splitButton);actionListElem.append(getMenu(actionList,scope));return actionListElem;}
function getSplitButton(actionTemplate){var actionElement=angular.element(actionTemplate.template);actionElement.attr('button-type','split-button');actionElement.attr('action-classes',actionElement.attr('action-classes'));actionElement.attr('callback',actionTemplate.callback);return actionElement;}
function getMenu(actionList){var menuElem=angular.element('<menu>');menuElem.append(actionList);return menuElem;}
function getMenuButton(actionTemplate){var actionElement=angular.element(actionTemplate.template);actionElement.attr('button-type','menu-item');actionElement.attr('callback',actionTemplate.callback);return actionElement;}
function getTemplate(permittedAction,index,permittedActions){var defered=$q.defer();var action=permittedAction.context;var url=getTemplateUrl(action,permittedActions.length);$http.get(url,{cache:$templateCache}).then(onTemplateGet);return defered.promise;function onTemplateGet(response){var callback=ctrl.generateDynamicCallback(action.service,index,resultHandler);var template=response.data.replace('$action-classes$',getActionClasses(action,index,permittedActions.length)).replace('$text$',action.template.text).replace('$title$',action.template.title).replace('$description$',action.template.description).replace('$panel-classes$',action.template.type in dangerTypes?'panel-danger':'panel-info').replace('$item$',item);defered.resolve({template:template,type:action.template.type||'button',callback:callback});}}
function getActionClasses(action,index,numPermittedActions){var actionClassesParam=action.template.actionClasses||"";var actionClasses='btn ';if(listType==='row'){if(numPermittedActions===1||index===0){if(action.template.type in dangerTypes){actionClasses+='btn-danger ';}else{actionClasses+='btn-default ';}
return actionClasses+actionClassesParam;}else{if(action.template.type in dangerTypes){return'text-danger'+actionClassesParam;}else{return actionClassesParam;}}}else if(listType==='detail'){if(action.template.type in dangerTypes){actionClasses+='btn-danger';}else{actionClasses+='btn-primary';}
return actionClasses;}else{return actionClassesParam;}}
function getTemplateUrl(action){if(angular.isDefined(action.template.url)){return action.template.url;}else if(angular.isDefined(action.template.type)&&listType!=='detail'){return basePath+'action-list/actions-'+action.template.type+'.template.html';}else{return basePath+'action-list/actions-'+listType+'.template.html';}}}}})();