(function(){'use strict';var push=Array.prototype.push;angular.module('horizon.dashboard.project.containers').factory('horizon.dashboard.project.containers.containers-model',ContainersModel);ContainersModel.$inject=['horizon.app.core.openstack-service-api.swift','horizon.framework.util.http.service','$q'];function ContainersModel(swiftAPI,apiService,$q){var model={info:{},containers:[],container:null,objects:[],folder:'',pseudo_folder_hierarchy:[],DELIMETER:'/',initialize:initialize,selectContainer:selectContainer,fullPath:fullPath,fetchContainerDetail:fetchContainerDetail,deleteObject:deleteObject,updateContainer:updateContainer,recursiveCollect:recursiveCollect,recursiveDelete:recursiveDelete,getContainers:getContainers,_recursiveDeleteFiles:recursiveDeleteFiles,_recursiveDeleteFolders:recursiveDeleteFolders};model.intialiseDeferred=$q.defer();model.getContainersDeferred=$q.defer();return model;function initialize(){$q.all([swiftAPI.getContainers().then(function onContainers(data){model.containers.length=0;push.apply(model.containers,data.data.items);}),swiftAPI.getInfo().then(function onInfo(data){model.swift_info=data.info;})]).then(function resolve(){model.intialiseDeferred.resolve();});}
function selectContainer(name,folder){for(var i=0;i<model.containers.length;i++){if(model.containers[i].name===name){model.container=model.containers[i];break;}}
model.objects.length=0;model.pseudo_folder_hierarchy.length=0;model.folder=folder;var spec={delimiter:model.DELIMETER};if(folder){spec.path=encodeURIComponent(folder)+model.DELIMETER;}
return swiftAPI.getObjects(name,spec).then(function onObjects(response){push.apply(model.objects,response.data.items);angular.forEach(model.objects,function setId(object){object.url=swiftAPI.getObjectURL(name,model.fullPath(object.name));});if(folder){push.apply(model.pseudo_folder_hierarchy,folder.split(model.DELIMETER)||[folder]);}});}
function fullPath(name){if(model.folder){return model.folder+model.DELIMETER+name;}
return name;}
function updateContainer(){return model.fetchContainerDetail(model.container,true);}
function fetchContainerDetail(container,force){if(container.is_fetched&&!force){var deferred=$q.defer();deferred.resolve();return deferred.promise;}
return swiftAPI.getContainer(container.name).then(function success(response){angular.extend(container,response.data);container.bytes=parseInt(container.container_bytes_used,10);container.count=parseInt(container.container_object_count,10);container.is_fetched=true;var milliseconds=Date.parse(container.timestamp);if(!isNaN(milliseconds)){container.timestamp=new Date(milliseconds);}});}
function deleteObject(object){var path=model.fullPath(object.name);if(object.is_subdir){path+=model.DELIMETER;}
return swiftAPI.deleteObject(model.container.name,path).then(function success(){for(var i=model.objects.length-1;i>=0;i--){if(model.objects[i].name===object.name){model.objects.splice(i,1);}}});}
function recursiveCollect(state,items,result){return $q.all(items.map(function each(item){if(item.is_object){state.counted.files++;result.push(item.path);return null;}else{var folder={folder:item.path,tree:[]};if(state.cancel){return null;}
result.push(folder);state.counted.folders++;var spec={delimiter:model.DELIMETER,path:encodeURIComponent(item.path).replace(/%2F/g,'/')};return swiftAPI.getObjects(model.container.name,spec).then(function objects(response){return recursiveCollect(state,response.data.items,folder.tree);});}}));}
function recursiveDelete(state,node){return model._recursiveDeleteFiles(state,node).then(function(){return model._recursiveDeleteFolders(state,node);});}
function recursiveDeleteFiles(state,node){if(angular.isObject(node)){return $q.all(node.tree.map(function each(subnode){return recursiveDeleteFiles(state,subnode);}));}else{return swiftAPI.deleteObject(model.container.name,node).then(function done(){state.deleted.files++;});}}
function recursiveDeleteFolders(state,node){if(!angular.isObject(node)){return null;}
if(!node.tree.length){return deleteFolder(node.folder);}
function deleteFolder(folderName){if(angular.isUndefined(folderName)){return null;}
var path=folderName+model.DELIMETER;var url=swiftAPI.getObjectURL(model.container.name,path);return apiService.delete(url).then(done,fail);function done(){state.deleted.folders++;}
function fail(response){if(response.status===404){done();}else{state.deleted.failures++;}}}
return $q.all(node.tree.map(function each(subnode){return recursiveDeleteFolders(state,subnode);})).then(function then(){return deleteFolder(node.folder);});}
function getContainers(params){swiftAPI.getContainers(params).then(function onContainers(data){model.containers.length=0;push.apply(model.containers,data.data.items);}).then(function resolve(){model.getContainersDeferred.resolve();});}}})();