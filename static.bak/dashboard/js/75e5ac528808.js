(function(){'use strict';angular.module('horizon.framework.widgets.transfer-table').controller('transferTableController',TransferTableController);TransferTableController.$inject=['$scope','$timeout','$parse','$attrs','$log','horizon.framework.widgets.transfer-table.events','horizon.framework.widgets.transfer-table.helpText','horizon.framework.widgets.transfer-table.limits','horizon.framework.util.q.extensions'];function TransferTableController($scope,$timeout,$parse,$attrs,$log,events,helpText,limits,qExtensions){var trModel=$parse($attrs.trModel)($scope);var trHelpText=$parse($attrs.helpText)($scope);var trLimits=$parse($attrs.limits)($scope);var ctrl=this;ctrl.allocate=allocate;ctrl.deallocate=deallocate;ctrl.itemActions=getItemActions();ctrl.toggleView=toggleView;ctrl.updateAllocated=updateAllocated;ctrl.numAllocated=numAllocated;ctrl.helpText=angular.extend({},helpText,trHelpText);ctrl.limits=angular.extend({},limits,trLimits);ctrl.numAvailable=numAvailable;ctrl.views={allocated:true,available:true};var availableChangedWatcher=$scope.$on(events.AVAIL_CHANGED,onAvailChanged);$scope.$on('$destroy',function(){availableChangedWatcher();});init(trModel);function getItemActions(){return[{template:{text:'',actionClasses:'fa fa-arrow-up'},service:{allowed:function allocationAllowed(item){var allocatable=item&&!ctrl.allocatedIds[item.id];return qExtensions.booleanAsPromise(allocatable);},perform:function performAllocation(item){allocate(item);return qExtensions.booleanAsPromise(true);}}},{template:{text:'',actionClasses:'fa fa-arrow-down'},service:{allowed:function deallocationAllowed(item){var deallocatable=item&&ctrl.allocatedIds[item.id];return qExtensions.booleanAsPromise(deallocatable);},perform:function performDeallocation(item){deallocate(item);return qExtensions.booleanAsPromise(true);}}}];}
function init(model){if(!angular.isArray(model.available)){$log.error('Available is not an array.');}
if(model.allocated&&!angular.isArray(model.allocated)){$log.error('Allocated is not an array.');}
ctrl.available={sourceItems:model.available,displayedItems:model.displayedAvailable?model.displayedAvailable:[]};ctrl.allocated={sourceItems:model.allocated?model.allocated:[],displayedItems:model.displayedAllocated?model.displayedAllocated:[]};ctrl.allocatedIds={};markAllocatedItems();$scope.$watchCollection(getAllocated,markAllocatedItems);}
function getAllocated(){return ctrl.allocated.sourceItems;}
function markAllocatedItems(){angular.forEach(ctrl.allocated.sourceItems,function flag(item){ctrl.allocatedIds[item.id]=true;});}
function allocate(item){if(ctrl.limits.maxAllocation<0||ctrl.limits.maxAllocation>ctrl.allocated.sourceItems.length){ctrl.allocated.sourceItems.push(item);ctrl.allocatedIds[item.id]=true;}else if(ctrl.limits.maxAllocation===1){var temp=ctrl.allocated.sourceItems.pop();delete ctrl.allocatedIds[temp.id];$timeout(function(){ctrl.allocated.sourceItems.push(item);ctrl.allocatedIds[item.id]=true;$scope.$apply();},0,false);}}
function deallocate(item){var index=ctrl.allocated.sourceItems.indexOf(item);if(index>=0){ctrl.allocated.sourceItems.splice(index,1);delete ctrl.allocatedIds[item.id];}}
function updateAllocated(event,item,orderedItems){ctrl.allocated.sourceItems.splice(0,ctrl.allocated.sourceItems.length);Array.prototype.push.apply(ctrl.allocated.sourceItems,orderedItems);}
function onAvailChanged(e,args){ctrl.available={sourceItems:args.data.available,displayedItems:args.data.displayedAvailable?args.data.displayedAvailable:[]};for(var i=0;i<ctrl.available.sourceItems.length;i++){var item=ctrl.available.sourceItems[i];if(item.id in ctrl.allocatedIds){ctrl.allocated.sourceItems.splice(i,1);delete ctrl.allocatedIds[item.id];}}}
function toggleView(view){ctrl.views[view]=!ctrl.views[view];}
function numAllocated(){return ctrl.allocated.sourceItems.length;}
function numAvailable(){return ctrl.available.sourceItems.length-ctrl.allocated.sourceItems.length;}}})();