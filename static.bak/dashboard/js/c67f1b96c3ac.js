(function(){'use strict';angular.module('horizon.app.core.flavors').factory('horizon.app.core.flavors.actions.delete-flavor.service',deleteFlavorService);deleteFlavorService.$inject=['horizon.app.core.openstack-service-api.nova','horizon.framework.util.actions.action-result.service','horizon.framework.util.i18n.gettext','horizon.framework.util.q.extensions','horizon.framework.widgets.modal.deleteModalService','horizon.app.core.flavors.resourceType'];function deleteFlavorService(nova,actionResultService,gettext,$qExtensions,deleteModal,flavorsResourceType){var service={allowed:allowed,perform:perform};return service;function allowed(){return $qExtensions.booleanAsPromise(true);}
function perform(items,scope){var flavors=angular.isArray(items)?items:[items];var context={labels:labelize(flavors.length),deleteEntity:deleteFlavor};return deleteModal.open(scope,flavors,context).then(deleteResult);}
function deleteResult(deleteModalResult){var actionResult=actionResultService.getActionResult();deleteModalResult.pass.forEach(function markDeleted(item){actionResult.deleted(flavorsResourceType,item.context.id);});deleteModalResult.fail.forEach(function markFailed(item){actionResult.failed(flavorsResourceType,item.context.id);});return actionResult.result;}
function labelize(count){return{title:ngettext('Confirm Delete Flavor','Confirm Delete Flavors',count),message:ngettext('You have selected "%s". Deleted flavor is not recoverable.','You have selected "%s". Deleted flavors are not recoverable.',count),submit:ngettext('Delete Flavor','Delete Flavors',count),success:ngettext('Deleted Flavor: %s.','Deleted Flavors: %s.',count),error:ngettext('Unable to delete Flavor: %s.','Unable to delete Flavors: %s.',count)};}
function deleteFlavor(flavor){return nova.deleteFlavor(flavor,true);}}})();