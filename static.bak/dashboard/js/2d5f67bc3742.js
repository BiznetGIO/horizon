(function(){'use strict';angular.module('horizon.dashboard.project.containers').controller('horizon.dashboard.project.containers.ContainersController',ContainersController);ContainersController.$inject=['horizon.app.core.openstack-service-api.swift','horizon.dashboard.project.containers.containers-model','horizon.dashboard.project.containers.basePath','horizon.dashboard.project.containers.baseRoute','horizon.dashboard.project.containers.containerRoute','horizon.framework.widgets.form.ModalFormService','horizon.framework.widgets.modal.simple-modal.service','horizon.framework.widgets.toast.service','horizon.framework.widgets.magic-search.events','horizon.framework.widgets.magic-search.service','$scope','$location','$q'];function ContainersController(swiftAPI,containersModel,basePath,baseRoute,containerRoute,modalFormService,simpleModalService,toastService,magicSearchEvents,magicSearchService,$scope,$location,$q){var ctrl=this;ctrl.model=containersModel;ctrl.model.initialize();ctrl.baseRoute=baseRoute;ctrl.containerRoute=containerRoute;ctrl.filterFacets=[{name:'prefix',label:gettext('Prefix'),singleton:true,isServer:true}];ctrl.filterEventTrigeredBySearchBar=true;ctrl.checkContainerNameConflict=checkContainerNameConflict;ctrl.toggleAccess=toggleAccess;ctrl.deleteContainer=deleteContainer;ctrl.deleteContainerAction=deleteContainerAction;ctrl.createContainer=createContainer;ctrl.createContainerAction=createContainerAction;ctrl.selectContainer=selectContainer;function checkContainerNameConflict(containerName){if(!containerName){return $q.when();}
var def=$q.defer();swiftAPI.getContainer(containerName,true).then(def.reject,def.resolve);return def.promise;}
function selectContainer(container){if(!ctrl.model.container||container.name!==ctrl.model.container.name){ctrl.filterEventTrigeredBySearchBar=false;}
ctrl.model.container=container;$location.path(ctrl.containerRoute+container.name);return ctrl.model.fetchContainerDetail(container);}
function toggleAccess(container){swiftAPI.setContainerAccess(container.name,container.is_public).then(function updated(){var access='private';if(container.is_public){access='public';}
toastService.add('success',interpolate(gettext('Container %(name)s is now %(access)s.'),{name:container.name,access:access},true));ctrl.model.fetchContainerDetail(container,true);},function failure(){container.is_public=!container.is_public;});}
function deleteContainer(container){var options={title:gettext('Confirm Delete'),body:interpolate(gettext('Are you sure you want to delete container %(name)s?'),container,true),submit:gettext('Yes'),cancel:gettext('No')};simpleModalService.modal(options).result.then(function confirmed(){return ctrl.deleteContainerAction(container);});}
function deleteContainerAction(container){swiftAPI.deleteContainer(container.name).then(function deleted(){toastService.add('success',interpolate(gettext('Container %(name)s deleted.'),container,true));for(var i=ctrl.model.containers.length-1;i>=0;i--){if(ctrl.model.containers[i].name===container.name){ctrl.model.containers.splice(i,1);break;}}
if(ctrl.model.container.name===container.name){$location.path(ctrl.baseRoute);}});}
var createContainerSchema={type:'object',properties:{name:{title:gettext('Container Name'),type:'string',pattern:'^[^/]+$',description:gettext('Container name must not contain "/".')},public:{title:gettext('Container Access'),type:'boolean',default:false,description:gettext('A Public Container will allow anyone with the Public URL to '+'gain access to your objects in the container.')}},required:['name']};var createContainerForm=[{type:'section',htmlClass:'row',items:[{type:'section',htmlClass:'col-sm-6',items:[{key:'name',validationMessage:{exists:gettext('A container with that name exists.')},$asyncValidators:{exists:checkContainerNameConflict}},{key:'public',type:'radiobuttons',disableSuccessState:true,titleMap:[{value:true,name:gettext('Public')},{value:false,name:gettext('Not public')}]}]},{type:'template',templateUrl:basePath+'create-container.help.html'}]}];function createContainer(){var model={name:'',public:false};var config={title:gettext('Create Container'),schema:createContainerSchema,form:createContainerForm,model:model};return modalFormService.open(config).then(function then(){return ctrl.createContainerAction(model);});}
function createContainerAction(model){return swiftAPI.createContainer(model.name,model.public).then(function success(){toastService.add('success',interpolate(gettext('Container %(name)s created.'),model,true));ctrl.model.containers.push({name:model.name,count:0,bytes:0});});}
$scope.$on(magicSearchEvents.SEARCH_UPDATED,function(event,data){if(ctrl.filterEventTrigeredBySearchBar){ctrl.model.getContainers(magicSearchService.getQueryObject(data));}
else{ctrl.filterEventTrigeredBySearchBar=true;}});}})();