(function(){'use strict';angular.module('horizon.dashboard.identity.roles').factory('horizon.dashboard.identity.roles.actions.create.service',createService);createService.$inject=['horizon.dashboard.identity.roles.resourceType','horizon.dashboard.identity.roles.role-schema','horizon.app.core.openstack-service-api.keystone','horizon.app.core.openstack-service-api.policy','horizon.framework.widgets.form.ModalFormService','horizon.framework.util.actions.action-result.service','horizon.framework.util.i18n.gettext','horizon.framework.widgets.toast.service'];function createService(resourceType,schema,keystoneAPI,policy,modalFormService,actionResultService,gettext,toast){var service={allowed:allowed,perform:perform,submit:submit};return service;function allowed(){return policy.ifAllowed({rules:[['identity','identity:create_role']]});}
function perform(){var model={name:''};var config={title:gettext('Create Role'),schema:schema,form:['*'],model:model};return modalFormService.open(config).then(submit);}
function submit(context){return keystoneAPI.createRole({name:context.model.name}).then(onSuccess);}
function onSuccess(response){var role=response.data;toast.add('success',interpolate(gettext('Role %s was successfully created.'),[role.name]));return actionResultService.getActionResult().created(resourceType,role.id).result;}}})();