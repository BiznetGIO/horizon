(function(){'use strict';angular.module('horizon.app.core.openstack-service-api').factory('horizon.app.core.openstack-service-api.network',networkAPI);networkAPI.$inject=['horizon.framework.util.http.service','horizon.framework.widgets.toast.service'];function networkAPI(apiService,toastService){var service={getFloatingIps:getFloatingIps,getFloatingIpPools:getFloatingIpPools,allocateFloatingIp:allocateFloatingIp,associateFloatingIp:associateFloatingIp,disassociateFloatingIp:disassociateFloatingIp};return service;function getFloatingIps(){return apiService.get('/api/network/floatingips/').error(function(){toastService.add('error',gettext('Unable to retrieve floating IPs.'));});}
function getFloatingIpPools(){return apiService.get('/api/network/floatingippools/').error(function(){toastService.add('error',gettext('Unable to retrieve floating IP pools.'));});}
function allocateFloatingIp(poolId){return apiService.post('/api/network/floatingip/',{pool_id:poolId}).error(function(){toastService.add('error',gettext('Unable to allocate new floating IP address.'));});}
function associateFloatingIp(addressId,portId){var params={address_id:addressId,port_id:portId};return apiService.patch('/api/network/floatingip/',params).error(function(){toastService.add('error',gettext('Unable to associate floating IP address.'));});}
function disassociateFloatingIp(addressId){return apiService.patch('/api/network/floatingip/',{address_id:addressId}).error(function(){toastService.add('error',gettext('Unable to disassociate floating IP address.'));});}}}());