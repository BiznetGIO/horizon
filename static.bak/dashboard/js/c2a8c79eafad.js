(function(){'use strict';angular.module('horizon.app.core.openstack-service-api').factory('horizon.app.core.openstack-service-api.glance',glanceAPI);glanceAPI.$inject=['horizon.framework.util.http.service','horizon.framework.widgets.toast.service'];function glanceAPI(apiService,toastService){var service={getVersion:getVersion,getImage:getImage,createImage:createImage,updateImage:updateImage,deleteImage:deleteImage,getImageProps:getImageProps,editImageProps:editImageProps,getImages:getImages,getNamespaces:getNamespaces,getResourceTypes:getResourceTypes};return service;function getVersion(){return apiService.get('/api/glance/version/').error(function(){toastService.add('error',gettext('Unable to get the Glance service version.'));});}
function getImage(id){return apiService.get('/api/glance/images/'+id+'/').error(function(){toastService.add('error',gettext('Unable to retrieve the image.'));});}
function createImage(image,onProgress){var localFile;var method=image.source_type==='file-legacy'?'post':'put';if(image.source_type==='file-direct'&&'data'in image){localFile=image.data;image=angular.extend({},image);image.data=localFile.name;}
function onImageQueued(response){var image=response.data;if('upload_url'in image){return apiService.put(image.upload_url,localFile,{headers:{'Content-Type':'application/octet-stream','X-Auth-Token':image.token_id},external:true}).then(function success(){return response;},onError,notify);}else{return response;}}
function notify(event){onProgress(Math.round(event.loaded/event.total*100));}
function onError(error){if(error&&error.data){throw error;}else{throw gettext('Unable to create the image.');}}
return apiService[method]('/api/glance/images/',image).then(onImageQueued,onError,notify);}
function updateImage(image){return apiService.patch('/api/glance/images/'+image.id+'/',image).error(function(){toastService.add('error',gettext('Unable to update the image.'));});}
function deleteImage(imageId,suppressError){var promise=apiService.delete('/api/glance/images/'+imageId+'/');return suppressError?promise:promise.error(function(){var msg=gettext('Unable to delete the image with id: %(id)s');toastService.add('error',interpolate(msg,{id:imageId},true));});}
function getImageProps(id){return apiService.get('/api/glance/images/'+id+'/properties/').error(function(){toastService.add('error',gettext('Unable to retrieve the image custom properties.'));});}
function editImageProps(id,updated,removed){return apiService.patch('/api/glance/images/'+id+'/properties/',{updated:updated,removed:removed}).error(function(){toastService.add('error',gettext('Unable to edit the image custom properties.'));});}
function getImages(params){var config=params?{'params':params}:{};return apiService.get('/api/glance/images/',config).error(function(){toastService.add('error',gettext('Unable to retrieve the images.'));});}
function getNamespaces(params,suppressError){var config=params?{'params':params}:{};config.cache=true;var promise=apiService.get('/api/glance/metadefs/namespaces/',config);return suppressError?promise:promise.error(function(){toastService.add('error',gettext('Unable to retrieve the namespaces.'));});}
function getResourceTypes(){var config={cache:true};return apiService.get('/api/glance/metadefs/resourcetypes/',config).error(function(){toastService.add('error',gettext('Unable to retrieve the resource types.'));});}}}());