(function(){'use strict';angular.module('horizon.app.core.openstack-service-api').factory('horizon.app.core.openstack-service-api.nova',novaAPI);novaAPI.$inject=['horizon.framework.util.http.service','horizon.framework.widgets.toast.service'];function novaAPI(apiService,toastService){var service={getActionList:getActionList,getConsoleLog:getConsoleLog,getConsoleInfo:getConsoleInfo,getServerVolumes:getServerVolumes,getServerSecurityGroups:getServerSecurityGroups,getKeypairs:getKeypairs,createKeypair:createKeypair,getAvailabilityZones:getAvailabilityZones,getLimits:getLimits,createServer:createServer,getServer:getServer,getServers:getServers,getServerGroups:getServerGroups,deleteServer:deleteServer,pauseServer:pauseServer,unpauseServer:unpauseServer,suspendServer:suspendServer,resumeServer:resumeServer,softRebootServer:softRebootServer,hardRebootServer:hardRebootServer,startServer:startServer,stopServer:stopServer,getExtensions:getExtensions,getFlavors:getFlavors,getFlavor:getFlavor,getFlavorExtraSpecs:getFlavorExtraSpecs,editFlavorExtraSpecs:editFlavorExtraSpecs,getAggregateExtraSpecs:getAggregateExtraSpecs,editAggregateExtraSpecs:editAggregateExtraSpecs,getServices:getServices,getInstanceMetadata:getInstanceMetadata,editInstanceMetadata:editInstanceMetadata,createFlavor:createFlavor,updateFlavor:updateFlavor,deleteFlavor:deleteFlavor,getDefaultQuotaSets:getDefaultQuotaSets,setDefaultQuotaSets:setDefaultQuotaSets,getEditableQuotas:getEditableQuotas,updateProjectQuota:updateProjectQuota,createServerSnapshot:createServerSnapshot};return service;function getServices(){return apiService.get('/api/nova/services/').error(function(){toastService.add('error',gettext('Unable to retrieve the nova services.'));});}
function getKeypairs(){return apiService.get('/api/nova/keypairs/').error(function(){toastService.add('error',gettext('Unable to retrieve the keypairs.'));});}
function createKeypair(newKeypair){return apiService.post('/api/nova/keypairs/',newKeypair).error(function(){if(angular.isDefined(newKeypair.public_key)){toastService.add('error',gettext('Unable to import the keypair.'));}else{toastService.add('error',gettext('Unable to create the keypair.'));}});}
function getAvailabilityZones(){return apiService.get('/api/nova/availzones/').error(function(){toastService.add('error',gettext('Unable to retrieve the availability zones.'));});}
function getLimits(reserved){var params={params:{reserved:reserved}};return apiService.get('/api/nova/limits/',params).error(function(){toastService.add('error',gettext('Unable to retrieve the limits.'));});}
function createServer(newServer){return apiService.post('/api/nova/servers/',newServer).error(function(){toastService.add('error',gettext('Unable to create the server.'));});}
function getServer(id){return apiService.get('/api/nova/servers/'+id).error(function(){toastService.add('error',gettext('Unable to retrieve the server.'));});}
function getServers(){return apiService.get('/api/nova/servers/').error(function(){toastService.add('error',gettext('Unable to retrieve instances.'));});}
function getServerGroups(){return apiService.get('/api/nova/servergroups/').error(function(){toastService.add('error',gettext('Unable to retrieve server groups.'));});}
function deleteServer(serverId,suppressError){var promise=apiService.delete('/api/nova/servers/'+serverId);return suppressError?promise:promise.error(function(){var msg=gettext('Unable to delete the server with id: %(id)s');toastService.add('error',interpolate(msg,{id:serverId},true));});}
function serverStateOperation(operation,serverId,suppressError,errMsg){var instruction={"operation":operation};var promise=apiService.post('/api/nova/servers/'+serverId,instruction);return suppressError?promise:promise.error(function(){toastService.add('error',interpolate(errMsg,{id:serverId},true));});}
function startServer(serverId,suppressError){return serverStateOperation('start',serverId,suppressError,gettext('Unable to start the server with id: %(id)s'));}
function pauseServer(serverId,suppressError){return serverStateOperation('pause',serverId,suppressError,gettext('Unable to pause the server with id: %(id)s'));}
function unpauseServer(serverId,suppressError){return serverStateOperation('unpause',serverId,suppressError,gettext('Unable to unpause the server with id: %(id)s'));}
function suspendServer(serverId,suppressError){return serverStateOperation('suspend',serverId,suppressError,gettext('Unable to suspend the server with id: %(id)s'));}
function resumeServer(serverId,suppressError){return serverStateOperation('resume',serverId,suppressError,gettext('Unable to resume the server with id: %(id)s'));}
function softRebootServer(serverId,suppressError){return serverStateOperation('soft_reboot',serverId,suppressError,gettext('Unable to soft-reboot the server with id: %(id)s'));}
function hardRebootServer(serverId,suppressError){return serverStateOperation('hard_reboot',serverId,suppressError,gettext('Unable to hard-reboot the server with id: %(id)s'));}
function stopServer(serverId,suppressError){return serverStateOperation('stop',serverId,suppressError,gettext('Unable to stop the server with id: %(id)s'));}
function getExtensions(config){return apiService.get('/api/nova/extensions/',config).error(function(){toastService.add('error',gettext('Unable to retrieve the extensions.'));});}
function getFlavors(params){var config=params?{'params':params}:{'params':{}};return apiService.get('/api/nova/flavors/',config).success(function(data){if(data&&data.items){data.items.map(function(item){if(item.hasOwnProperty('OS-FLV-EXT-DATA:ephemeral')){item.ephemeral=item['OS-FLV-EXT-DATA:ephemeral'];}
if(item.hasOwnProperty('OS-FLV-DISABLED:disabled')){item.disabled=item['OS-FLV-DISABLED:disabled'];}
if(item.hasOwnProperty('os-flavor-access:is_public')){item.is_public=item['os-flavor-access:is_public'];}});}}).error(function(){toastService.add('error',gettext('Unable to retrieve the flavors.'));});}
function getFlavor(id,getExtras,getAccessList){var config={'params':{}};if(getExtras){config.params.get_extras='true';}
if(getAccessList){config.params.get_access_list='true';}
return apiService.get('/api/nova/flavors/'+id+'/',config).error(function(){toastService.add('error',gettext('Unable to retrieve the flavor.'));});}
function createFlavor(flavor){return apiService.post('/api/nova/flavors/',flavor).error(function(){toastService.add('error',gettext('Unable to create the flavor.'));});}
function updateFlavor(flavor){return apiService.patch('/api/nova/flavors/'+flavor.id+'/',flavor).error(function(){toastService.add('error',gettext('Unable to update the flavor.'));});}
function deleteFlavor(flavorId,suppressError){var promise=apiService.delete('/api/nova/flavors/'+flavorId+'/');return suppressError?promise:promise.error(function(){var msg=gettext('Unable to delete the flavor with id: %(id)s');toastService.add('error',interpolate(msg,{id:flavorId},true));});}
function getFlavorExtraSpecs(id){return apiService.get('/api/nova/flavors/'+id+'/extra-specs/').error(function(){toastService.add('error',gettext('Unable to retrieve the flavor extra specs.'));});}
function editFlavorExtraSpecs(id,updated,removed){return apiService.patch('/api/nova/flavors/'+id+'/extra-specs/',{updated:updated,removed:removed}).error(function(){toastService.add('error',gettext('Unable to edit the flavor extra specs.'));});}
function getAggregateExtraSpecs(id){return apiService.get('/api/nova/aggregates/'+id+'/extra-specs/').error(function(){toastService.add('error',gettext('Unable to retrieve the aggregate extra specs.'));});}
function editAggregateExtraSpecs(id,updated,removed){return apiService.patch('/api/nova/aggregates/'+id+'/extra-specs/',{updated:updated,removed:removed}).error(function(){toastService.add('error',gettext('Unable to edit the aggregate extra specs.'));});}
function getInstanceMetadata(id){return apiService.get('/api/nova/servers/'+id+'/metadata').error(function(){toastService.add('error',gettext('Unable to retrieve instance metadata.'));});}
function editInstanceMetadata(id,updated,removed){return apiService.patch('/api/nova/servers/'+id+'/metadata',{updated:updated,removed:removed}).error(function(){toastService.add('error',gettext('Unable to edit instance metadata.'));});}
function getDefaultQuotaSets(){return apiService.get('/api/nova/quota-sets/defaults/').error(function(){toastService.add('error',gettext('Unable to retrieve the default quotas.'));});}
function setDefaultQuotaSets(quotas){return apiService.patch('/api/nova/quota-sets/defaults/',quotas).error(function(){toastService.add('error',gettext('Unable to set the default quotas.'));});}
function getEditableQuotas(){return apiService.get('/api/nova/quota-sets/editable/').error(function(){toastService.add('error',gettext('Unable to retrieve the editable quotas.'));});}
function updateProjectQuota(quota,projectId){var url='/api/nova/quota-sets/'+projectId;return apiService.patch(url,quota).error(function(){toastService.add('error',gettext('Unable to update project quota data.'));});}
function createServerSnapshot(newSnapshot){return apiService.post('/api/nova/snapshots/',newSnapshot).error(function(){toastService.add('error',gettext('Unable to create the server snapshot.'));});}
function getActionList(instanceId){return apiService.get('/api/nova/servers/'+instanceId+'/actions/').error(function(){toastService.add('error',gettext('Unable to load the server actions.'));});}
function getConsoleLog(instanceId,length){var config={};if(length){config.length=length;}
return apiService.post('/api/nova/servers/'+instanceId+'/console-output/',config).error(function(){toastService.add('error',gettext('Unable to load the server console log.'));});}
function getConsoleInfo(instanceId,type){var config={};if(type){config.console_type=type;}
return apiService.post('/api/nova/servers/'+instanceId+'/console-info/',config).error(function(){toastService.add('error',gettext('Unable to load the server console info.'));});}
function getServerVolumes(instanceId){return apiService.get('/api/nova/servers/'+instanceId+'/volumes/').error(function(){toastService.add('error',gettext('Unable to load the server volumes.'));});}
function getServerSecurityGroups(instanceId){return apiService.get('/api/nova/servers/'+instanceId+'/security-groups/').error(function(){toastService.add('error',gettext('Unable to load the server security groups.'));});}}}());