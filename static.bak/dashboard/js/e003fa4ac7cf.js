(function(){'use strict';angular.module('horizon.app.core.openstack-service-api').factory('horizon.app.core.openstack-service-api.neutron',neutronAPI);neutronAPI.$inject=['horizon.framework.util.http.service','horizon.framework.widgets.toast.service'];function neutronAPI(apiService,toastService){var service={createNetwork:createNetwork,createSubnet:createSubnet,deleteTrunk:deleteTrunk,getAgents:getAgents,getDefaultQuotaSets:getDefaultQuotaSets,getExtensions:getExtensions,getNetworks:getNetworks,getPorts:getPorts,getQosPolicy:getQosPolicy,getQoSPolicies:getQoSPolicies,getSubnets:getSubnets,getTrunk:getTrunk,getTrunks:getTrunks,updateProjectQuota:updateProjectQuota};return service;function convertDatesHumanReadable(apidict){apidict.created_at=new Date(apidict.created_at);apidict.updated_at=new Date(apidict.updated_at);}
function getAgents(){return apiService.get('/api/neutron/agents/').error(function(){toastService.add('error',gettext('Unable to retrieve the agents.'));});}
function getNetworks(){return apiService.get('/api/neutron/networks/').error(function(){toastService.add('error',gettext('Unable to retrieve the networks.'));});}
function createNetwork(newNetwork){return apiService.post('/api/neutron/networks/',newNetwork).error(function(){toastService.add('error',gettext('Unable to create the network.'));});}
function getSubnets(networkId){return apiService.get('/api/neutron/subnets/',networkId).error(function(){toastService.add('error',gettext('Unable to retrieve the subnets.'));});}
function createSubnet(newSubnet){return apiService.post('/api/neutron/subnets/',newSubnet).error(function(){toastService.add('error',gettext('Unable to create the subnet.'));});}
function getPorts(params){var config=params?{'params':params}:{};return apiService.get('/api/neutron/ports/',config).error(function(){toastService.add('error',gettext('Unable to retrieve the ports.'));});}
function getExtensions(){return apiService.get('/api/neutron/extensions/').error(function(){toastService.add('error',gettext('Unable to retrieve the extensions.'));});}
function getDefaultQuotaSets(){return apiService.get('/api/neutron/quota-sets/defaults/').error(function(){toastService.add('error',gettext('Unable to retrieve the default quotas.'));});}
function updateProjectQuota(quota,projectId){var url='/api/neutron/quotas-sets/'+projectId;return apiService.patch(url,quota).error(function(){toastService.add('error',gettext('Unable to update project quota data.'));});}
function getQosPolicy(id){return apiService.get('/api/neutron/qos_policy/'+id+'/').error(function(){toastService.add('error',gettext('Unable to retrieve the qos policy.'));});}
function getQoSPolicies(){return apiService.get('/api/neutron/qos_policies/').error(function(){toastService.add('error',gettext('Unable to retrieve the qos policies.'));});}
function getTrunk(id){return apiService.get('/api/neutron/trunks/'+id+'/').success(function(trunk){convertDatesHumanReadable(trunk);}).error(function(){var msg=gettext('Unable to retrieve the trunk with id: %(id)s');toastService.add('error',interpolate(msg,{id:id},true));});}
function getTrunks(params){var config=params?{'params':params}:{};return apiService.get('/api/neutron/trunks/',config).success(function(trunks){trunks.items.forEach(function(trunk){convertDatesHumanReadable(trunk);});}).error(function(){toastService.add('error',gettext('Unable to retrieve the trunks.'));});}
function deleteTrunk(trunkId){var promise=apiService.delete('/api/neutron/trunks/'+trunkId+'/');return promise.error(function(){var msg=gettext('Unable to delete trunk: %(id)s');toastService.add('error',interpolate(msg,{id:trunkId},true));});}}}());