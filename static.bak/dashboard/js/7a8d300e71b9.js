(function(){'use strict';var push=Array.prototype.push;var noop=angular.noop;angular.module('horizon.dashboard.project.workflow.launch-instance').factory('launchInstanceModel',launchInstanceModel);launchInstanceModel.$inject=['$q','$log','horizon.app.core.openstack-service-api.cinder','horizon.app.core.openstack-service-api.glance','horizon.app.core.openstack-service-api.neutron','horizon.app.core.openstack-service-api.nova','horizon.app.core.openstack-service-api.novaExtensions','horizon.app.core.openstack-service-api.security-group','horizon.app.core.openstack-service-api.serviceCatalog','horizon.app.core.openstack-service-api.settings','horizon.dashboard.project.workflow.launch-instance.boot-source-types','horizon.framework.widgets.toast.service','horizon.app.core.openstack-service-api.policy','horizon.dashboard.project.workflow.launch-instance.step-policy'];function launchInstanceModel($q,$log,cinderAPI,glanceAPI,neutronAPI,novaAPI,novaExtensions,securityGroup,serviceCatalog,settings,bootSourceTypes,toast,policy,stepPolicy){var initPromise;var model={initializing:false,initialized:false,newInstanceSpec:{},availabilityZones:[],flavors:[],allowedBootSources:[],images:[],allowCreateVolumeFromImage:false,imageSnapshots:[],keypairs:[],metadataDefs:{flavor:null,image:null,volume:null,instance:null,hints:null},networks:[],ports:[],neutronEnabled:false,novaLimits:{},securityGroups:[],serverGroups:[],volumeBootable:false,volumes:[],volumeSnapshots:[],metadataTree:null,hintsTree:null,loaded:{availabilityZones:false},initialize:initialize,createInstance:createInstance};function initializeNewInstanceSpec(){model.newInstanceSpec={availability_zone:null,admin_pass:null,config_drive:false,user_data:'',disk_config:'AUTO',flavor:null,instance_count:1,key_pair:[],name:null,networks:[],ports:[],scheduler_hints:{},security_groups:[],server_groups:[],source_type:null,source:[],create_volume_default:true,vol_create:false,vol_device_name:'vda',vol_delete_on_instance_delete:false,vol_size:1};}
function initializeLoadStatus(){angular.forEach(model.loaded,function(val,key){model.loaded[key]=false;});}
function initialize(deep){var deferred,promise;initializeNewInstanceSpec();initializeLoadStatus();if(model.initializing){promise=initPromise;}else if(model.initialized&&!deep){deferred=$q.defer();promise=deferred.promise;deferred.resolve();}else{model.initializing=true;model.allowedBootSources.length=0;var launchInstanceDefaults=settings.getSetting('LAUNCH_INSTANCE_DEFAULTS');promise=$q.all([novaAPI.getAvailabilityZones().then(onGetAvailabilityZones).finally(onGetAvailabilityZonesComplete),novaAPI.getFlavors({is_public:true,get_extras:true}).then(onGetFlavors,noop),novaAPI.getKeypairs().then(onGetKeypairs,noop),novaAPI.getLimits(true).then(onGetNovaLimits,noop),securityGroup.query().then(onGetSecurityGroups,noop),serviceCatalog.ifTypeEnabled('network').then(getNetworks,noop),launchInstanceDefaults.then(addImageSourcesIfEnabled,noop),launchInstanceDefaults.then(setDefaultValues,noop),launchInstanceDefaults.then(addVolumeSourcesIfEnabled,noop)]);promise.then(onInitSuccess,onInitFail);}
return promise;}
function onInitSuccess(){model.initializing=false;model.initialized=true;getServerGroups();getMetadataDefinitions();}
function onInitFail(){model.initializing=false;model.initialized=false;}
function setDefaultValues(defaults){if(!defaults){return;}
if('config_drive'in defaults){model.newInstanceSpec.config_drive=defaults.config_drive;}
if('create_volume'in defaults){model.newInstanceSpec.create_volume_default=defaults.create_volume;}}
function createInstance(){var finalSpec=angular.copy(model.newInstanceSpec);cleanNullProperties(finalSpec);setFinalSpecBootsource(finalSpec);setFinalSpecFlavor(finalSpec);setFinalSpecNetworks(finalSpec);setFinalSpecPorts(finalSpec);setFinalSpecKeyPairs(finalSpec);setFinalSpecSecurityGroups(finalSpec);setFinalSpecServerGroup(finalSpec);setFinalSpecSchedulerHints(finalSpec);setFinalSpecMetadata(finalSpec);return novaAPI.createServer(finalSpec).then(successMessage);}
function successMessage(){var numberInstances=model.newInstanceSpec.instance_count;var message=ngettext('%s instance launched.','%s instances launched.',numberInstances);toast.add('success',interpolate(message,[numberInstances]));}
function cleanNullProperties(finalSpec){for(var key in finalSpec){if(finalSpec.hasOwnProperty(key)&&finalSpec[key]===null){delete finalSpec[key];}}}
function onGetAvailabilityZones(data){model.availabilityZones.length=0;push.apply(model.availabilityZones,data.data.items.filter(function(zone){return zone.zoneState&&zone.zoneState.available;}).map(function(zone){return{label:zone.zoneName,value:zone.zoneName};}));if(model.availabilityZones.length===1){model.newInstanceSpec.availability_zone=model.availabilityZones[0].value;}else if(model.availabilityZones.length>1){model.availabilityZones.unshift({label:gettext("Any Availability Zone"),value:""});model.newInstanceSpec.availability_zone=model.availabilityZones[0].value;}}
function onGetAvailabilityZonesComplete(){model.loaded.availabilityZones=true;}
function onGetFlavors(data){model.flavors.length=0;push.apply(model.flavors,data.data.items);}
function setFinalSpecFlavor(finalSpec){if(finalSpec.flavor){finalSpec.flavor_id=finalSpec.flavor.id;}else{delete finalSpec.flavor_id;}
delete finalSpec.flavor;}
function onGetKeypairs(data){angular.extend(model.keypairs,data.data.items.map(function(e){e.keypair.id='li_keypair:'+e.keypair.name;return e.keypair;}));if(data.data.items.length===1){model.newInstanceSpec.key_pair.push(data.data.items[0].keypair);}}
function setFinalSpecKeyPairs(finalSpec){if(!finalSpec.key_name&&finalSpec.key_pair.length===1){finalSpec.key_name=finalSpec.key_pair[0].name;}else if(!finalSpec.key_name){finalSpec.key_name=null;}
delete finalSpec.key_pair;}
function onGetSecurityGroups(data){model.securityGroups.length=0;angular.forEach(data.data.items,function addDefault(item){if(item.name==='default'){model.newInstanceSpec.security_groups.push(item);}});push.apply(model.securityGroups,data.data.items);}
function setFinalSpecSecurityGroups(finalSpec){var securityGroupIds=[];finalSpec.security_groups.forEach(function(securityGroup){if(model.neutronEnabled){securityGroupIds.push(securityGroup.id);}else{securityGroupIds.push(securityGroup.name);}});finalSpec.security_groups=securityGroupIds;}
function getServerGroups(){policy.ifAllowed(stepPolicy.serverGroups).then(function(){novaAPI.getServerGroups().then(onGetServerGroups,noop);},noop);}
function onGetServerGroups(data){model.serverGroups.length=0;push.apply(model.serverGroups,data.data.items);}
function setFinalSpecServerGroup(finalSpec){if(finalSpec.server_groups.length>0){finalSpec.scheduler_hints.group=finalSpec.server_groups[0].id;}
delete finalSpec.server_groups;}
function getNetworks(){return neutronAPI.getNetworks().then(onGetNetworks,noop).then(getPorts,noop);}
function onGetNetworks(data){model.neutronEnabled=true;model.networks.length=0;if(data.data.items.length===1){model.newInstanceSpec.networks.push(data.data.items[0]);}
push.apply(model.networks,data.data.items.filter(function(net){return net.subnets.length>0;}));return data;}
function setFinalSpecNetworks(finalSpec){finalSpec.nics=[];finalSpec.networks.forEach(function(network){finalSpec.nics.push({"net-id":network.id,"v4-fixed-ip":""});});delete finalSpec.networks;}
function getPorts(networks){model.ports.length=0;networks.data.items.forEach(function(network){return neutronAPI.getPorts({network_id:network.id}).then(function(ports){onGetPorts(ports,network);},noop);});}
function onGetPorts(networkPorts,network){var ports=[];networkPorts.data.items.forEach(function(port){if(port.device_owner===""&&port.admin_state==="UP"){port.subnet_names=getPortSubnets(port,network.subnets);port.network_name=network.name;if(!port.hasOwnProperty("trunk_id")){ports.push(port);}}});push.apply(model.ports,ports);}
function getPortSubnets(port,subnets){var subnetNames={};port.fixed_ips.forEach(function(ip){subnets.forEach(function(subnet){if(ip.subnet_id===subnet.id){subnetNames[ip.ip_address]=subnet.name;}});});return subnetNames;}
function setFinalSpecPorts(finalSpec){finalSpec.ports.forEach(function(port){finalSpec.nics.push({"port-id":port.id});});delete finalSpec.ports;}
function addImageSourcesIfEnabled(config){var allEnabled=!config;var enabledImage=allEnabled||!config.disable_image;var enabledSnapshot=allEnabled||!config.disable_instance_snapshot;if(enabledImage||enabledSnapshot){return glanceAPI.getImages({status:'active'}).then(function getEnabledImages(data){if(enabledImage){onGetImages(data);}
if(enabledSnapshot){onGetSnapshots(data);}});}}
function addVolumeSourcesIfEnabled(config){var volumeDeferred=$q.defer();var volumeSnapshotDeferred=$q.defer();var absoluteLimitsDeferred=$q.defer();serviceCatalog.ifTypeEnabled('volumev2').then(onVolumeServiceEnabled,onCheckVolumeV3);function onCheckVolumeV3(){serviceCatalog.ifTypeEnabled('volumev3').then(onVolumeServiceEnabled,resolvePromises);}
function onVolumeServiceEnabled(){model.volumeBootable=true;novaExtensions.ifNameEnabled('BlockDeviceMappingV2Boot').then(onBootToVolumeSupported);if(!config||!config.disable_volume){getVolumes().then(resolveVolumes,failVolumes);getAbsoluteLimits().then(resolveAbsoluteLimitsDeferred,resolveAbsoluteLimitsDeferred);}else{resolveVolumes();resolveAbsoluteLimitsDeferred();}
if(!config||!config.disable_volume_snapshot){getVolumeSnapshots().then(resolveVolumeSnapshots,failVolumeSnapshots);}else{resolveVolumeSnapshots();}}
function onBootToVolumeSupported(){model.allowCreateVolumeFromImage=true;}
function getVolumes(){return cinderAPI.getVolumes({status:'available',bootable:1}).then(onGetVolumes);}
function getAbsoluteLimits(){return cinderAPI.getAbsoluteLimits().then(onGetCinderLimits);}
function getVolumeSnapshots(){return cinderAPI.getVolumeSnapshots({status:'available'}).then(onGetVolumeSnapshots);}
function resolvePromises(){volumeDeferred.resolve();volumeSnapshotDeferred.resolve();absoluteLimitsDeferred.resolve();}
function resolveVolumes(){volumeDeferred.resolve();}
function failVolumes(){volumeDeferred.resolve();}
function resolveVolumeSnapshots(){volumeSnapshotDeferred.resolve();}
function failVolumeSnapshots(){volumeSnapshotDeferred.resolve();}
function resolveAbsoluteLimitsDeferred(){absoluteLimitsDeferred.resolve();}
return $q.all([volumeDeferred.promise,volumeSnapshotDeferred.promise,absoluteLimitsDeferred.promise]);}
function isBootableImageType(image){return bootSourceTypes.NON_BOOTABLE_IMAGE_TYPES.indexOf(image.container_format)<0;}
function onGetImages(data){model.images.length=0;push.apply(model.images,data.data.items.filter(function(image){return isBootableImageType(image)&&(!image.properties||image.properties.image_type!=='snapshot');}));addAllowedBootSource(model.images,bootSourceTypes.IMAGE,gettext('Image'));}
function onGetSnapshots(data){model.imageSnapshots.length=0;push.apply(model.imageSnapshots,data.data.items.filter(function(image){return isBootableImageType(image)&&(image.properties&&image.properties.image_type==='snapshot');}));addAllowedBootSource(model.imageSnapshots,bootSourceTypes.INSTANCE_SNAPSHOT,gettext('Instance Snapshot'));}
function onGetVolumes(data){model.volumes.length=0;push.apply(model.volumes,data.data.items);addAllowedBootSource(model.volumes,bootSourceTypes.VOLUME,gettext('Volume'));}
function onGetVolumeSnapshots(data){model.volumeSnapshots.length=0;push.apply(model.volumeSnapshots,data.data.items);addAllowedBootSource(model.volumeSnapshots,bootSourceTypes.VOLUME_SNAPSHOT,gettext('Volume Snapshot'));}
function addAllowedBootSource(rawTypes,type,label){if(rawTypes){model.allowedBootSources.push({type:type,label:label});model.allowedBootSources.sort(function(a,b){return a.type>b.type;});}}
function setFinalSpecBootsource(finalSpec){finalSpec.source_id=finalSpec.source&&finalSpec.source[0]&&finalSpec.source[0].id;delete finalSpec.source;switch(finalSpec.source_type.type){case bootSourceTypes.IMAGE:setFinalSpecBootImageToVolume(finalSpec);break;case bootSourceTypes.INSTANCE_SNAPSHOT:setFinalSpecBootImageToVolume(finalSpec);break;case bootSourceTypes.VOLUME:setFinalSpecBootFromVolumeDevice(finalSpec,'vol');break;case bootSourceTypes.VOLUME_SNAPSHOT:setFinalSpecBootFromVolumeDevice(finalSpec,'snap');break;default:$log.error("Unknown source type: "+finalSpec.source_type);}
delete finalSpec.source_type;delete finalSpec.vol_create;delete finalSpec.vol_device_name;delete finalSpec.vol_delete_on_instance_delete;delete finalSpec.vol_size;}
function setFinalSpecBootImageToVolume(finalSpec){if(finalSpec.vol_create){var deviceName=finalSpec.vol_device_name?finalSpec.vol_device_name:null;finalSpec.block_device_mapping_v2=[];finalSpec.block_device_mapping_v2.push({'device_name':deviceName,'source_type':bootSourceTypes.IMAGE,'destination_type':bootSourceTypes.VOLUME,'delete_on_termination':finalSpec.vol_delete_on_instance_delete,'uuid':finalSpec.source_id,'boot_index':'0','volume_size':finalSpec.vol_size});finalSpec.source_id=null;}}
function setFinalSpecBootFromVolumeDevice(finalSpec,sourceType){finalSpec.block_device_mapping={};finalSpec.block_device_mapping[finalSpec.vol_device_name]=[finalSpec.source_id,':',sourceType,'::',finalSpec.vol_delete_on_instance_delete].join('');finalSpec.source_id='';}
function onGetCinderLimits(response){model.cinderLimits=response.data;}
function onGetNovaLimits(data){angular.extend(model.novaLimits,data.data);}
function setFinalSpecSchedulerHints(finalSpec){if(model.hintsTree){var hints=model.hintsTree.getExisting();if(!angular.equals({},hints)){angular.forEach(hints,function(value,key){finalSpec.scheduler_hints[key]=value+'';});}}}
function setFinalSpecMetadata(finalSpec){if(model.metadataTree){var meta=model.metadataTree.getExisting();if(!angular.equals({},meta)){angular.forEach(meta,function(value,key){meta[key]=value+'';});finalSpec.meta=meta;}}}
function getMetadataDefinitions(){var resourceTypes={flavor:['OS::Nova::Flavor',''],image:['OS::Glance::Image',''],volume:['OS::Cinder::Volumes',''],instance:['OS::Nova::Server','metadata']};angular.forEach(resourceTypes,applyForResourceType);$q.all([settings.ifEnabled('LAUNCH_INSTANCE_DEFAULTS.enable_scheduler_hints',true,true),policy.ifAllowed(stepPolicy.schedulerHints)]).then(function getSchedulerHints(){applyForResourceType(['OS::Nova::Server','scheduler_hints'],'hints');});}
function applyForResourceType(resourceType,key){glanceAPI.getNamespaces({resource_type:resourceType[0],properties_target:resourceType[1]},true).then(function(data){var namespaces=data.data.items;model.metadataDefs[key]=namespaces;});}
return model;}})();